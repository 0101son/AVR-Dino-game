
DinoCPP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000005ce  00000662  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  0080010a  0080010a  0000066c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000069c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015bd  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d9a  00000000  00000000  00001db5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000871  00000000  00000000  00002b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  000033c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000992  00000000  00000000  0000363c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004a6  00000000  00000000  00003fce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004474  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	a3 c0       	rjmp	.+326    	; 0x14c <__vector_1>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4a c2       	rjmp	.+1172   	; 0x4be <__vector_10>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1e c2       	rjmp	.+1084   	; 0x47e <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ec       	ldi	r30, 0xCE	; 206
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 32       	cpi	r26, 0x20	; 32
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	f9 d0       	rcall	.+498    	; 0x2b6 <main>
  c4:	82 c2       	rjmp	.+1284   	; 0x5ca <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <_ZN4Dino10initializeEv>:

GameObject::Position Dino::dinoPosition;
unsigned int Dino::airTimer;

void Dino::initialize(){
	dinoPosition = ground;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_ZN4Dino12dinoPositionE>
	airTimer = 0;
  ce:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__data_end+0x1>
  d2:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
  d6:	08 95       	ret

000000d8 <_ZN4Dino4jumpEv>:
		}
	}
}

void Dino::jump() {
	if(dinoPosition == ground){
  d8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <_ZN4Dino12dinoPositionE>
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	41 f4       	brne	.+16     	; 0xf0 <_ZN4Dino4jumpEv+0x18>
		SoundManager::playSFX(SoundManager::jump);
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	32 d2       	rcall	.+1124   	; 0x548 <_ZN12SoundManager7playSFXENS_3SFXE>
		dinoPosition = air;
  e4:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <_ZN4Dino12dinoPositionE>
		airTimer = 0;
  e8:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__data_end+0x1>
  ec:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
  f0:	08 95       	ret

000000f2 <_ZN4Dino4landEv>:
	}
}

void Dino::land() {
	// 착지 로직
	dinoPosition = ground;
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_ZN4Dino12dinoPositionE>
  f8:	08 95       	ret

000000fa <_ZN4Dino6updateEv>:
void Dino::initialize(){
	dinoPosition = ground;
	airTimer = 0;
}
void Dino::update(){
	if(dinoPosition == air){
  fa:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <_ZN4Dino12dinoPositionE>
  fe:	81 11       	cpse	r24, r1
 100:	11 c0       	rjmp	.+34     	; 0x124 <_ZN4Dino6updateEv+0x2a>
		airTimer++;
 102:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 106:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 10a:	01 96       	adiw	r24, 0x01	; 1
 10c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 110:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		if(airTimer == 120){
 114:	88 37       	cpi	r24, 0x78	; 120
 116:	91 05       	cpc	r25, r1
 118:	29 f4       	brne	.+10     	; 0x124 <_ZN4Dino6updateEv+0x2a>
			airTimer = 0;
 11a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__data_end+0x1>
 11e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
			land();
 122:	e7 cf       	rjmp	.-50     	; 0xf2 <_ZN4Dino4landEv>
 124:	08 95       	ret

00000126 <_ZN4Dino10isOnGroundEv>:
	// 착지 로직
	dinoPosition = ground;
}

bool Dino::isOnGround() {
	return (dinoPosition == ground);
 126:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <_ZN4Dino12dinoPositionE>
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	91 30       	cpi	r25, 0x01	; 1
 12e:	09 f0       	breq	.+2      	; 0x132 <_ZN4Dino10isOnGroundEv+0xc>
 130:	80 e0       	ldi	r24, 0x00	; 0
}
 132:	08 95       	ret

00000134 <_ZN4Dino10displaySegEi>:

unsigned char Dino::displaySeg (int segNum){
	unsigned char seg = 0; 
	if(segNum == 1){
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	31 f4       	brne	.+12     	; 0x144 <_ZN4Dino10displaySegEi+0x10>
		if(dinoPosition == ground){
 138:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <_ZN4Dino12dinoPositionE>
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	21 f4       	brne	.+8      	; 0x148 <_ZN4Dino10displaySegEi+0x14>
			seg |= 0x50;
 140:	80 e5       	ldi	r24, 0x50	; 80
 142:	08 95       	ret
bool Dino::isOnGround() {
	return (dinoPosition == ground);
}

unsigned char Dino::displaySeg (int segNum){
	unsigned char seg = 0; 
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	08 95       	ret
	if(segNum == 1){
		if(dinoPosition == ground){
			seg |= 0x50;
		}else{
			seg |= 0x21;
 148:	81 e2       	ldi	r24, 0x21	; 33
		}
	}
	
	return seg;
 14a:	08 95       	ret

0000014c <__vector_1>:
	GAMEOVER	//게임을 종료하고 점수를 출력합니다.
};

GameMode gameMode;

ISR(INT0_vect){	//푸시 버튼을 누르면 호출됩니다. 
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	0b b6       	in	r0, 0x3b	; 59
 158:	0f 92       	push	r0
 15a:	2f 93       	push	r18
 15c:	3f 93       	push	r19
 15e:	4f 93       	push	r20
 160:	5f 93       	push	r21
 162:	6f 93       	push	r22
 164:	7f 93       	push	r23
 166:	8f 93       	push	r24
 168:	9f 93       	push	r25
 16a:	af 93       	push	r26
 16c:	bf 93       	push	r27
 16e:	ef 93       	push	r30
 170:	ff 93       	push	r31
	if(gameMode == MAINGAME){
 172:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <gameMode>
 176:	81 11       	cpse	r24, r1
 178:	0e c0       	rjmp	.+28     	; 0x196 <__vector_1+0x4a>
		if(PIND & 1){
 17a:	80 9b       	sbis	0x10, 0	; 16
 17c:	06 c0       	rjmp	.+12     	; 0x18a <__vector_1+0x3e>
			//버튼 누름
			EICRA &=0;
 17e:	ea e6       	ldi	r30, 0x6A	; 106
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	10 82       	st	Z, r1
			Dino::jump();
 186:	a8 df       	rcall	.-176    	; 0xd8 <_ZN4Dino4jumpEv>
 188:	06 c0       	rjmp	.+12     	; 0x196 <__vector_1+0x4a>
			}else{
			//버튼 땜
			EICRA |=1;
 18a:	ea e6       	ldi	r30, 0x6A	; 106
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	81 60       	ori	r24, 0x01	; 1
			Dino::land();
 192:	80 83       	st	Z, r24
 194:	ae df       	rcall	.-164    	; 0xf2 <_ZN4Dino4landEv>
		}
	}
}
 196:	ff 91       	pop	r31
 198:	ef 91       	pop	r30
 19a:	bf 91       	pop	r27
 19c:	af 91       	pop	r26
 19e:	9f 91       	pop	r25
 1a0:	8f 91       	pop	r24
 1a2:	7f 91       	pop	r23
 1a4:	6f 91       	pop	r22
 1a6:	5f 91       	pop	r21
 1a8:	4f 91       	pop	r20
 1aa:	3f 91       	pop	r19
 1ac:	2f 91       	pop	r18
 1ae:	0f 90       	pop	r0
 1b0:	0b be       	out	0x3b, r0	; 59
 1b2:	0f 90       	pop	r0
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti

000001bc <_Z14showCharactersv>:
		Show2Digit(Obstacle::score);	//게임모드가 GAMEOVER이므로, 점수를 출력합니다.
	}
	
}

void showCharacters(){
 1bc:	1f 93       	push	r17
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
	unsigned char segment;
	for(int i = 0; i<4;i++){	//네 7세그먼트에서 각각 출력할 내용을 bitwise OR 연산으로 겹쳐 출력합니다.
 1c2:	c0 e0       	ldi	r28, 0x00	; 0
 1c4:	d0 e0       	ldi	r29, 0x00	; 0
 1c6:	c4 30       	cpi	r28, 0x04	; 4
 1c8:	d1 05       	cpc	r29, r1
 1ca:	cc f4       	brge	.+50     	; 0x1fe <_Z14showCharactersv+0x42>
		segment = 0;
		segment |= Dino::displaySeg(i);
 1cc:	ce 01       	movw	r24, r28
 1ce:	b2 df       	rcall	.-156    	; 0x134 <_ZN4Dino10displaySegEi>
 1d0:	18 2f       	mov	r17, r24
		segment |= Obstacle::displaySeg(i);
 1d2:	ce 01       	movw	r24, r28
 1d4:	44 d1       	rcall	.+648    	; 0x45e <_ZN8Obstacle10displaySegEi>
 1d6:	81 2b       	or	r24, r17
		
		PORTC=~(1<<i);		//출력할 7세그먼트 옯기기
 1d8:	21 e0       	ldi	r18, 0x01	; 1
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	0c 2e       	mov	r0, r28
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <_Z14showCharactersv+0x28>
 1e0:	22 0f       	add	r18, r18
 1e2:	33 1f       	adc	r19, r19
 1e4:	0a 94       	dec	r0
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <_Z14showCharactersv+0x24>
 1e8:	20 95       	com	r18
 1ea:	25 bb       	out	0x15, r18	; 21
		
		PORTA = segment;	//출력
 1ec:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ee:	8f e3       	ldi	r24, 0x3F	; 63
 1f0:	9f e1       	ldi	r25, 0x1F	; 31
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <_Z14showCharactersv+0x36>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <_Z14showCharactersv+0x3c>
 1f8:	00 00       	nop
	
}

void showCharacters(){
	unsigned char segment;
	for(int i = 0; i<4;i++){	//네 7세그먼트에서 각각 출력할 내용을 bitwise OR 연산으로 겹쳐 출력합니다.
 1fa:	21 96       	adiw	r28, 0x01	; 1
 1fc:	e4 cf       	rjmp	.-56     	; 0x1c6 <_Z14showCharactersv+0xa>
		
		PORTA = segment;	//출력
		
		_delay_ms(2);
	}	
};
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	1f 91       	pop	r17
 204:	08 95       	ret

00000206 <_Z9ShowDigitii>:
		_delay_ms(2);// wait for a second
	}
}

void ShowDigit(int i,int digit) {
	PORTC=~(0x01<<digit);
 206:	21 e0       	ldi	r18, 0x01	; 1
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <_Z9ShowDigitii+0xa>
 20c:	22 0f       	add	r18, r18
 20e:	33 1f       	adc	r19, r19
 210:	6a 95       	dec	r22
 212:	e2 f7       	brpl	.-8      	; 0x20c <_Z9ShowDigitii+0x6>
 214:	20 95       	com	r18
 216:	25 bb       	out	0x15, r18	; 21
	PORTA=Segment_Data[i];
 218:	80 50       	subi	r24, 0x00	; 0
 21a:	9f 4f       	sbci	r25, 0xFF	; 255
 21c:	fc 01       	movw	r30, r24
 21e:	80 81       	ld	r24, Z
 220:	8b bb       	out	0x1b, r24	; 27
 222:	08 95       	ret

00000224 <_Z10Show2Digiti>:
		
		_delay_ms(2);
	}	
};
	
void Show2Digit(int n) {	//예제의 함수를 약간 변형하여 2자리 수를 출력합니다.
 224:	0f 93       	push	r16
 226:	1f 93       	push	r17
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	00 d0       	rcall	.+0      	; 0x22e <_Z10Show2Digiti+0xa>
 22e:	00 d0       	rcall	.+0      	; 0x230 <_Z10Show2Digiti+0xc>
 230:	cd b7       	in	r28, 0x3d	; 61
 232:	de b7       	in	r29, 0x3e	; 62
 234:	fc 01       	movw	r30, r24
	unsigned int COLUMN[2]={0,0};
	
	COLUMN[0] = (n%100)/10;
 236:	64 e6       	ldi	r22, 0x64	; 100
 238:	70 e0       	ldi	r23, 0x00	; 0
 23a:	a0 d1       	rcall	.+832    	; 0x57c <__divmodhi4>
 23c:	2a e0       	ldi	r18, 0x0A	; 10
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	b9 01       	movw	r22, r18
 242:	9c d1       	rcall	.+824    	; 0x57c <__divmodhi4>
 244:	7a 83       	std	Y+2, r23	; 0x02
 246:	69 83       	std	Y+1, r22	; 0x01
	COLUMN[1] = (n%10);
 248:	cf 01       	movw	r24, r30
 24a:	b9 01       	movw	r22, r18
 24c:	97 d1       	rcall	.+814    	; 0x57c <__divmodhi4>
 24e:	9c 83       	std	Y+4, r25	; 0x04
 250:	8b 83       	std	Y+3, r24	; 0x03
	
	for(int i=0;i<2;i++) {
 252:	00 e0       	ldi	r16, 0x00	; 0
 254:	10 e0       	ldi	r17, 0x00	; 0
 256:	02 30       	cpi	r16, 0x02	; 2
 258:	11 05       	cpc	r17, r1
 25a:	c4 f4       	brge	.+48     	; 0x28c <_Z10Show2Digiti+0x68>
		ShowDigit(COLUMN[i],i+2);
 25c:	b8 01       	movw	r22, r16
 25e:	6e 5f       	subi	r22, 0xFE	; 254
 260:	7f 4f       	sbci	r23, 0xFF	; 255
 262:	f8 01       	movw	r30, r16
 264:	ee 0f       	add	r30, r30
 266:	ff 1f       	adc	r31, r31
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	8c 0f       	add	r24, r28
 26e:	9d 1f       	adc	r25, r29
 270:	e8 0f       	add	r30, r24
 272:	f9 1f       	adc	r31, r25
 274:	80 81       	ld	r24, Z
 276:	91 81       	ldd	r25, Z+1	; 0x01
 278:	c6 df       	rcall	.-116    	; 0x206 <_Z9ShowDigitii>
 27a:	8f e3       	ldi	r24, 0x3F	; 63
 27c:	9f e1       	ldi	r25, 0x1F	; 31
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <_Z10Show2Digiti+0x5a>
 282:	00 c0       	rjmp	.+0      	; 0x284 <_Z10Show2Digiti+0x60>
 284:	00 00       	nop
	unsigned int COLUMN[2]={0,0};
	
	COLUMN[0] = (n%100)/10;
	COLUMN[1] = (n%10);
	
	for(int i=0;i<2;i++) {
 286:	0f 5f       	subi	r16, 0xFF	; 255
 288:	1f 4f       	sbci	r17, 0xFF	; 255
 28a:	e5 cf       	rjmp	.-54     	; 0x256 <_Z10Show2Digiti+0x32>
		ShowDigit(COLUMN[i],i+2);
	
		_delay_ms(2);// wait for a second
	}
}
 28c:	0f 90       	pop	r0
 28e:	0f 90       	pop	r0
 290:	0f 90       	pop	r0
 292:	0f 90       	pop	r0
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	1f 91       	pop	r17
 29a:	0f 91       	pop	r16
 29c:	08 95       	ret

0000029e <_Z7displayv>:
    }
}

void display(){	//모드에 따라 필요한 세그먼트를 출력합니다.
	
	if(gameMode == MAINGAME){	//Dino, Obstacle 클래스로부터 출력할 세그먼트를 받아옵니다.
 29e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <gameMode>
 2a2:	81 11       	cpse	r24, r1
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <_Z7displayv+0xc>
		showCharacters();
 2a6:	8a cf       	rjmp	.-236    	; 0x1bc <_Z14showCharactersv>
 2a8:	08 95       	ret
	}else{
		Show2Digit(Obstacle::score);	//게임모드가 GAMEOVER이므로, 점수를 출력합니다.
 2aa:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_ZN8Obstacle5scoreE>
 2ae:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <_ZN8Obstacle5scoreE+0x1>
 2b2:	b8 cf       	rjmp	.-144    	; 0x224 <_Z10Show2Digiti>
 2b4:	08 95       	ret

000002b6 <main>:
}

int main(void)	//필요한 세팅과 변수를 초기화한 뒤, 게임 루프를 시작합니다. 
{
	// 세븐세그먼트 세팅
	DDRC = 0xff;
 2b6:	8f ef       	ldi	r24, 0xFF	; 255
 2b8:	84 bb       	out	0x14, r24	; 20
	DDRA = 0xff;
 2ba:	8a bb       	out	0x1a, r24	; 26
	PORTC = 0x00;
 2bc:	15 ba       	out	0x15, r1	; 21
	
	// 버튼 인터럽트 세팅
	EICRA = 0x03;
 2be:	83 e0       	ldi	r24, 0x03	; 3
 2c0:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EIMSK = 0x01;
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	89 bf       	out	0x39, r24	; 57
	SREG |= 0x80; 
 2c8:	8f b7       	in	r24, 0x3f	; 63
 2ca:	80 68       	ori	r24, 0x80	; 128
 2cc:	8f bf       	out	0x3f, r24	; 63

	gameMode = MAINGAME;
 2ce:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <gameMode>
	SoundManager::initialize();
 2d2:	29 d1       	rcall	.+594    	; 0x526 <_ZN12SoundManager10initializeEv>
	Dino::initialize();
 2d4:	f9 de       	rcall	.-526    	; 0xc8 <_ZN4Dino10initializeEv>
	Obstacle::initialize();
 2d6:	10 d0       	rcall	.+32     	; 0x2f8 <_ZN8Obstacle10initializeEv>
    
	SoundManager::playSFX(SoundManager::gameOver);
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	36 d1       	rcall	.+620    	; 0x548 <_ZN12SoundManager7playSFXENS_3SFXE>
 2dc:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <gameMode>
    while (1) 
    {
		if(gameMode == MAINGAME){
 2e0:	81 11       	cpse	r24, r1
			Dino::update();
 2e2:	08 c0       	rjmp	.+16     	; 0x2f4 <main+0x3e>
 2e4:	0a df       	rcall	.-492    	; 0xfa <_ZN4Dino6updateEv>
			Obstacle::update();
 2e6:	7d d0       	rcall	.+250    	; 0x3e2 <_ZN8Obstacle6updateEv>
 2e8:	b7 d0       	rcall	.+366    	; 0x458 <_ZN8Obstacle10isGameOverEv>
			bool isGameOver = Obstacle::isGameOver();
 2ea:	88 23       	and	r24, r24
			if(isGameOver){
 2ec:	19 f0       	breq	.+6      	; 0x2f4 <main+0x3e>
 2ee:	81 e0       	ldi	r24, 0x01	; 1
				gameMode = GAMEOVER;
 2f0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <gameMode>
 2f4:	d4 df       	rcall	.-88     	; 0x29e <_Z7displayv>
			}
				
		}
		display();
 2f6:	f2 cf       	rjmp	.-28     	; 0x2dc <main+0x26>

000002f8 <_ZN8Obstacle10initializeEv>:

bool Obstacle::collision;

void Obstacle::initialize(){
	// 초기화 로직
	position = 3;
 2f8:	83 e0       	ldi	r24, 0x03	; 3
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <_ZN8Obstacle8positionE+0x1>
 300:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <_ZN8Obstacle8positionE>
	
	enable = false;
 304:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <_ZN8Obstacle6enableE>
	obstacleTimer = 0;
 308:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <_ZN8Obstacle13obstacleTimerE+0x1>
 30c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <_ZN8Obstacle13obstacleTimerE>
	
	obstacleSpeed = 0; 
 310:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <_ZN8Obstacle13obstacleSpeedE+0x1>
 314:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <_ZN8Obstacle13obstacleSpeedE>
	
	spawnCounter = 0;
 318:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <_ZN8Obstacle12spawnCounterE+0x1>
 31c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <_ZN8Obstacle12spawnCounterE>
	
	score = 0;
 320:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <_ZN8Obstacle5scoreE+0x1>
 324:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <_ZN8Obstacle5scoreE>
	
	collision = false;
 328:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <_ZN8Obstacle9collisionE>
 32c:	08 95       	ret

0000032e <_ZN8Obstacle5spawnEv>:
}

void Obstacle::spawn(){
	//장애물 생성
	if(enable == false){
 32e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_ZN8Obstacle6enableE>
 332:	81 11       	cpse	r24, r1
 334:	11 c0       	rjmp	.+34     	; 0x358 <_ZN8Obstacle5spawnEv+0x2a>
		enable = true;
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_ZN8Obstacle6enableE>
		position = 3;
 33c:	83 e0       	ldi	r24, 0x03	; 3
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <_ZN8Obstacle8positionE+0x1>
 344:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <_ZN8Obstacle8positionE>
		
		obstacleTimer = 0;
 348:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <_ZN8Obstacle13obstacleTimerE+0x1>
 34c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <_ZN8Obstacle13obstacleTimerE>
		
		spawnCounter = 0;
 350:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <_ZN8Obstacle12spawnCounterE+0x1>
 354:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <_ZN8Obstacle12spawnCounterE>
 358:	08 95       	ret

0000035a <_ZN8Obstacle7disableEv>:
	
	
}

void Obstacle::disable(){
	enable = false;
 35a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <_ZN8Obstacle6enableE>
	//비활성화
	obstacleSpeed+=8;
 35e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <_ZN8Obstacle13obstacleSpeedE>
 362:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <_ZN8Obstacle13obstacleSpeedE+0x1>
 366:	08 96       	adiw	r24, 0x08	; 8
 368:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <_ZN8Obstacle13obstacleSpeedE+0x1>
 36c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <_ZN8Obstacle13obstacleSpeedE>
	//장애물을 넘길 때 마다 장애물 속도 증가
	score++;
 370:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_ZN8Obstacle5scoreE>
 374:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <_ZN8Obstacle5scoreE+0x1>
 378:	01 96       	adiw	r24, 0x01	; 1
 37a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_ZN8Obstacle5scoreE+0x1>
 37e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_ZN8Obstacle5scoreE>
	//점수 추가
	if(score == 10){
 382:	0a 97       	sbiw	r24, 0x0a	; 10
 384:	21 f4       	brne	.+8      	; 0x38e <_ZN8Obstacle7disableEv+0x34>
		//10점 획득 시
		collision = true;
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <_ZN8Obstacle9collisionE>
		//게임오버를 위해 충돌 처리
		SoundManager::playSFX(SoundManager::gameOver);
 38c:	dd c0       	rjmp	.+442    	; 0x548 <_ZN12SoundManager7playSFXENS_3SFXE>
 38e:	08 95       	ret

00000390 <_ZN8Obstacle14checkCollisionEv>:
	}
}

void Obstacle::checkCollision() {
	//충돌 감지
	if (Dino::isOnGround() && position == 1) {
 390:	ca de       	rcall	.-620    	; 0x126 <_ZN4Dino10isOnGroundEv>
 392:	88 23       	and	r24, r24
 394:	49 f0       	breq	.+18     	; 0x3a8 <_ZN8Obstacle14checkCollisionEv+0x18>
 396:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <_ZN8Obstacle8positionE>
 39a:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <_ZN8Obstacle8positionE+0x1>
 39e:	21 30       	cpi	r18, 0x01	; 1
 3a0:	31 05       	cpc	r19, r1
 3a2:	19 f0       	breq	.+6      	; 0x3aa <_ZN8Obstacle14checkCollisionEv+0x1a>
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	01 c0       	rjmp	.+2      	; 0x3aa <_ZN8Obstacle14checkCollisionEv+0x1a>
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	88 23       	and	r24, r24
 3ac:	21 f0       	breq	.+8      	; 0x3b6 <_ZN8Obstacle14checkCollisionEv+0x26>
		//공룡이 지상에 있다면
		collision = true;
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <_ZN8Obstacle9collisionE>
		//충돌 - 게임 오버 처리
		SoundManager::playSFX(SoundManager::gameOver);
 3b4:	c9 c0       	rjmp	.+402    	; 0x548 <_ZN12SoundManager7playSFXENS_3SFXE>
 3b6:	08 95       	ret

000003b8 <_ZN8Obstacle4moveEv>:
	
}

void Obstacle::move(){
	//왼쪽으로 움직이기
	if (position == 1) {
 3b8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_ZN8Obstacle8positionE>
 3bc:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <_ZN8Obstacle8positionE+0x1>
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	09 f4       	brne	.+2      	; 0x3c6 <_ZN8Obstacle4moveEv+0xe>
		//공룡 위치를 통과할 경우
		checkCollision();
 3c4:	e5 df       	rcall	.-54     	; 0x390 <_ZN8Obstacle14checkCollisionEv>
		//충돌 감지
	}
	
	if(position ==0){
 3c6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_ZN8Obstacle8positionE>
 3ca:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <_ZN8Obstacle8positionE+0x1>
 3ce:	00 97       	sbiw	r24, 0x00	; 0
		//가장 왼쪽 칸에 위치할 경우
		disable();
 3d0:	11 f4       	brne	.+4      	; 0x3d6 <_ZN8Obstacle4moveEv+0x1e>
 3d2:	c3 cf       	rjmp	.-122    	; 0x35a <_ZN8Obstacle7disableEv>
 3d4:	08 95       	ret
		//비활성화
	}else{
		//가장 왼쪽 칸이 아니라면
		position--;
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <_ZN8Obstacle8positionE+0x1>
 3dc:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <_ZN8Obstacle8positionE>
 3e0:	08 95       	ret

000003e2 <_ZN8Obstacle6updateEv>:
	
}

void Obstacle::update(){
	// 업데이트 로직
	if(enable){
 3e2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_ZN8Obstacle6enableE>
 3e6:	88 23       	and	r24, r24
 3e8:	d1 f0       	breq	.+52     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
		//활성화 상태라면
		obstacleTimer++;
 3ea:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <_ZN8Obstacle13obstacleTimerE>
 3ee:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <_ZN8Obstacle13obstacleTimerE+0x1>
 3f2:	01 96       	adiw	r24, 0x01	; 1
 3f4:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <_ZN8Obstacle13obstacleTimerE+0x1>
 3f8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <_ZN8Obstacle13obstacleTimerE>
		
		if(obstacleTimer == (100-obstacleSpeed)){
 3fc:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <_ZN8Obstacle13obstacleSpeedE>
 400:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <_ZN8Obstacle13obstacleSpeedE+0x1>
 404:	24 e6       	ldi	r18, 0x64	; 100
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	24 1b       	sub	r18, r20
 40a:	35 0b       	sbc	r19, r21
 40c:	82 17       	cp	r24, r18
 40e:	93 07       	cpc	r25, r19
 410:	11 f5       	brne	.+68     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
			//이동 속도 증가
			obstacleTimer = 0;
 412:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <_ZN8Obstacle13obstacleTimerE+0x1>
 416:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <_ZN8Obstacle13obstacleTimerE>
			move();
 41a:	ce cf       	rjmp	.-100    	; 0x3b8 <_ZN8Obstacle4moveEv>
 41c:	08 95       	ret
			//한 칸 왼쪽으로 이동
		}
	}else{
		//비활성화 상태라면
		spawnCounter++;
 41e:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <_ZN8Obstacle12spawnCounterE>
 422:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <_ZN8Obstacle12spawnCounterE+0x1>
 426:	2f 5f       	subi	r18, 0xFF	; 255
 428:	3f 4f       	sbci	r19, 0xFF	; 255
 42a:	30 93 13 01 	sts	0x0113, r19	; 0x800113 <_ZN8Obstacle12spawnCounterE+0x1>
 42e:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <_ZN8Obstacle12spawnCounterE>
		if (spawnCounter == 2*(100-obstacleSpeed))
 432:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <_ZN8Obstacle13obstacleSpeedE>
 436:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <_ZN8Obstacle13obstacleSpeedE+0x1>
 43a:	84 e6       	ldi	r24, 0x64	; 100
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	84 1b       	sub	r24, r20
 440:	95 0b       	sbc	r25, r21
 442:	88 0f       	add	r24, r24
 444:	99 1f       	adc	r25, r25
 446:	28 17       	cp	r18, r24
 448:	39 07       	cpc	r19, r25
 44a:	29 f4       	brne	.+10     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
		{
			//생성 빈도 증가
			spawnCounter = 0;
 44c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <_ZN8Obstacle12spawnCounterE+0x1>
 450:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <_ZN8Obstacle12spawnCounterE>
			spawn();
 454:	6c cf       	rjmp	.-296    	; 0x32e <_ZN8Obstacle5spawnEv>
 456:	08 95       	ret

00000458 <_ZN8Obstacle10isGameOverEv>:
}

bool Obstacle::isGameOver(){
	return collision;
	//충돌 - 게임 오버 처리
}
 458:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <_ZN8Obstacle9collisionE>
 45c:	08 95       	ret

0000045e <_ZN8Obstacle10displaySegEi>:

unsigned char Obstacle::displaySeg(int segNum){
	// 디스플레이 세그먼트 로직
	unsigned char seg = 0;
	// 비어있는 세그먼트 정보
	if(segNum == position && enable){
 45e:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <_ZN8Obstacle8positionE>
 462:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <_ZN8Obstacle8positionE+0x1>
 466:	28 17       	cp	r18, r24
 468:	39 07       	cpc	r19, r25
 46a:	29 f4       	brne	.+10     	; 0x476 <_ZN8Obstacle10displaySegEi+0x18>
 46c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_ZN8Obstacle6enableE>
 470:	81 11       	cpse	r24, r1
 472:	03 c0       	rjmp	.+6      	; 0x47a <_ZN8Obstacle10displaySegEi+0x1c>
 474:	08 95       	ret
	//충돌 - 게임 오버 처리
}

unsigned char Obstacle::displaySeg(int segNum){
	// 디스플레이 세그먼트 로직
	unsigned char seg = 0;
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	08 95       	ret
	// 비어있는 세그먼트 정보
	if(segNum == position && enable){
		// 자신의 위치에 대한 세그먼트 요청 및 활성화 시
		seg = 0x8C;
 47a:	8c e8       	ldi	r24, 0x8C	; 140
		// 세그먼트 정보 덮어씌우기
	}
	return seg;
	// 세그먼트 정보 출력
 47c:	08 95       	ret

0000047e <__vector_16>:
unsigned int SoundManager::noteCount = 0;
unsigned int SoundManager::noteTimeCounter = 0;
unsigned int SoundManager::noteTimeCount = 0;
bool SoundManager::isSoundOn = false;

ISR(TIMER0_OVF_vect){
 47e:	1f 92       	push	r1
 480:	0f 92       	push	r0
 482:	0f b6       	in	r0, 0x3f	; 63
 484:	0f 92       	push	r0
 486:	11 24       	eor	r1, r1
 488:	0b b6       	in	r0, 0x3b	; 59
 48a:	0f 92       	push	r0
 48c:	8f 93       	push	r24
 48e:	ef 93       	push	r30
 490:	ff 93       	push	r31
	TCNT0 = SoundManager::Timer0Value;
 492:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <_ZN12SoundManager11Timer0ValueE>
 496:	82 bf       	out	0x32, r24	; 50
	if (SoundManager::isSoundOn) {
 498:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <_ZN12SoundManager9isSoundOnE>
 49c:	88 23       	and	r24, r24
 49e:	29 f0       	breq	.+10     	; 0x4aa <__vector_16+0x2c>
		PORTF ^= 0x80; // isSoundOn이 true일 때만 토글
 4a0:	e2 e6       	ldi	r30, 0x62	; 98
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	80 81       	ld	r24, Z
 4a6:	80 58       	subi	r24, 0x80	; 128
 4a8:	80 83       	st	Z, r24
	}
}
 4aa:	ff 91       	pop	r31
 4ac:	ef 91       	pop	r30
 4ae:	8f 91       	pop	r24
 4b0:	0f 90       	pop	r0
 4b2:	0b be       	out	0x3b, r0	; 59
 4b4:	0f 90       	pop	r0
 4b6:	0f be       	out	0x3f, r0	; 63
 4b8:	0f 90       	pop	r0
 4ba:	1f 90       	pop	r1
 4bc:	18 95       	reti

000004be <__vector_10>:

ISR(TIMER2_OVF_vect) {
 4be:	1f 92       	push	r1
 4c0:	0f 92       	push	r0
 4c2:	0f b6       	in	r0, 0x3f	; 63
 4c4:	0f 92       	push	r0
 4c6:	11 24       	eor	r1, r1
 4c8:	2f 93       	push	r18
 4ca:	8f 93       	push	r24
 4cc:	9f 93       	push	r25
	SoundManager::noteTimeCounter++; // 음의 길이 카운팅
 4ce:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <_ZN12SoundManager15noteTimeCounterE>
 4d2:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <_ZN12SoundManager15noteTimeCounterE+0x1>
 4d6:	01 96       	adiw	r24, 0x01	; 1
 4d8:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <_ZN12SoundManager15noteTimeCounterE+0x1>
 4dc:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <_ZN12SoundManager15noteTimeCounterE>

	if (SoundManager::noteTimeCounter == 15) {
 4e0:	0f 97       	sbiw	r24, 0x0f	; 15
 4e2:	c9 f4       	brne	.+50     	; 0x516 <__vector_10+0x58>
		SoundManager::noteTimeCounter = 0; // 카운터 재설정
 4e4:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <_ZN12SoundManager15noteTimeCounterE+0x1>
 4e8:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <_ZN12SoundManager15noteTimeCounterE>

		if (SoundManager::noteCount  < 1) {
 4ec:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZN12SoundManager9noteCountE>
 4f0:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <_ZN12SoundManager9noteCountE+0x1>
 4f4:	00 97       	sbiw	r24, 0x00	; 0
 4f6:	49 f4       	brne	.+18     	; 0x50a <__vector_10+0x4c>
			// 다음 음 재생
			SoundManager::Timer0Value = 255-(1000000/(8*C1)); // 다음 음의 주파수 값 설정
 4f8:	20 e1       	ldi	r18, 0x10	; 16
 4fa:	20 93 1f 01 	sts	0x011F, r18	; 0x80011f <_ZN12SoundManager11Timer0ValueE>
			SoundManager::noteCount++; // 다음 음으로 넘어가기
 4fe:	01 96       	adiw	r24, 0x01	; 1
 500:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <_ZN12SoundManager9noteCountE+0x1>
 504:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_ZN12SoundManager9noteCountE>
 508:	06 c0       	rjmp	.+12     	; 0x516 <__vector_10+0x58>
		} else {
			// 모든 음 재생 완료
			SoundManager::isSoundOn = false; // 소리 재생 중지
 50a:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <_ZN12SoundManager9isSoundOnE>
			SoundManager::noteCount = 0; // 음 카운터 초기화
 50e:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <_ZN12SoundManager9noteCountE+0x1>
 512:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <_ZN12SoundManager9noteCountE>
		}
	}
}
 516:	9f 91       	pop	r25
 518:	8f 91       	pop	r24
 51a:	2f 91       	pop	r18
 51c:	0f 90       	pop	r0
 51e:	0f be       	out	0x3f, r0	; 63
 520:	0f 90       	pop	r0
 522:	1f 90       	pop	r1
 524:	18 95       	reti

00000526 <_ZN12SoundManager10initializeEv>:
                    
void SoundManager::initialize(){
	DDRF = 0x80;	//소리 신호 출력 단자
 526:	80 e8       	ldi	r24, 0x80	; 128
 528:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	
	TCCR0 = 0x04;	//분주비 설정
 52c:	84 e0       	ldi	r24, 0x04	; 4
 52e:	83 bf       	out	0x33, r24	; 51
	TCCR2 = 0x04;	
 530:	85 bd       	out	0x25, r24	; 37
	
	TIMSK = 0x41;	// TOIE0, TOIE2 오버플로우 인터럽트 활성화
 532:	81 e4       	ldi	r24, 0x41	; 65
 534:	87 bf       	out	0x37, r24	; 55
	Timer0Value = 0;
 536:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <_ZN12SoundManager11Timer0ValueE>
	
	
	isSoundOn = false;	// 소리 비활성화
 53a:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <_ZN12SoundManager9isSoundOnE>
	
	noteCount = 0;
 53e:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <_ZN12SoundManager9noteCountE+0x1>
 542:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <_ZN12SoundManager9noteCountE>
 546:	08 95       	ret

00000548 <_ZN12SoundManager7playSFXENS_3SFXE>:
};

void SoundManager::playSFX(SFX sfx){
	// SFX에 따라 시작음 설정

	switch (sfx) {
 548:	88 23       	and	r24, r24
 54a:	19 f0       	breq	.+6      	; 0x552 <_ZN12SoundManager7playSFXENS_3SFXE+0xa>
 54c:	81 30       	cpi	r24, 0x01	; 1
 54e:	59 f0       	breq	.+22     	; 0x566 <_ZN12SoundManager7playSFXENS_3SFXE+0x1e>
 550:	11 c0       	rjmp	.+34     	; 0x574 <_ZN12SoundManager7playSFXENS_3SFXE+0x2c>
		case jump:
			noteCount = 1;	// C1 연주 후 중단
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <_ZN12SoundManager9noteCountE+0x1>
 55a:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_ZN12SoundManager9noteCountE>
			SoundManager::Timer0Value = 255-(1000000/(8*C1));
 55e:	80 e1       	ldi	r24, 0x10	; 16
 560:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <_ZN12SoundManager11Timer0ValueE>
			break;
 564:	07 c0       	rjmp	.+14     	; 0x574 <_ZN12SoundManager7playSFXENS_3SFXE+0x2c>
		case gameOver:
			noteCount = 0;	// C2 -> C1 연주 후 중단
 566:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <_ZN12SoundManager9noteCountE+0x1>
 56a:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <_ZN12SoundManager9noteCountE>
			SoundManager::Timer0Value = 255-(1000000/(8*C2));
 56e:	88 e8       	ldi	r24, 0x88	; 136
 570:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <_ZN12SoundManager11Timer0ValueE>
			break;
	}
	isSoundOn = true; // 소리 활성화
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <_ZN12SoundManager9isSoundOnE>
 57a:	08 95       	ret

0000057c <__divmodhi4>:
 57c:	97 fb       	bst	r25, 7
 57e:	07 2e       	mov	r0, r23
 580:	16 f4       	brtc	.+4      	; 0x586 <__divmodhi4+0xa>
 582:	00 94       	com	r0
 584:	06 d0       	rcall	.+12     	; 0x592 <__divmodhi4_neg1>
 586:	77 fd       	sbrc	r23, 7
 588:	08 d0       	rcall	.+16     	; 0x59a <__divmodhi4_neg2>
 58a:	0b d0       	rcall	.+22     	; 0x5a2 <__udivmodhi4>
 58c:	07 fc       	sbrc	r0, 7
 58e:	05 d0       	rcall	.+10     	; 0x59a <__divmodhi4_neg2>
 590:	3e f4       	brtc	.+14     	; 0x5a0 <__divmodhi4_exit>

00000592 <__divmodhi4_neg1>:
 592:	90 95       	com	r25
 594:	81 95       	neg	r24
 596:	9f 4f       	sbci	r25, 0xFF	; 255
 598:	08 95       	ret

0000059a <__divmodhi4_neg2>:
 59a:	70 95       	com	r23
 59c:	61 95       	neg	r22
 59e:	7f 4f       	sbci	r23, 0xFF	; 255

000005a0 <__divmodhi4_exit>:
 5a0:	08 95       	ret

000005a2 <__udivmodhi4>:
 5a2:	aa 1b       	sub	r26, r26
 5a4:	bb 1b       	sub	r27, r27
 5a6:	51 e1       	ldi	r21, 0x11	; 17
 5a8:	07 c0       	rjmp	.+14     	; 0x5b8 <__udivmodhi4_ep>

000005aa <__udivmodhi4_loop>:
 5aa:	aa 1f       	adc	r26, r26
 5ac:	bb 1f       	adc	r27, r27
 5ae:	a6 17       	cp	r26, r22
 5b0:	b7 07       	cpc	r27, r23
 5b2:	10 f0       	brcs	.+4      	; 0x5b8 <__udivmodhi4_ep>
 5b4:	a6 1b       	sub	r26, r22
 5b6:	b7 0b       	sbc	r27, r23

000005b8 <__udivmodhi4_ep>:
 5b8:	88 1f       	adc	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	5a 95       	dec	r21
 5be:	a9 f7       	brne	.-22     	; 0x5aa <__udivmodhi4_loop>
 5c0:	80 95       	com	r24
 5c2:	90 95       	com	r25
 5c4:	bc 01       	movw	r22, r24
 5c6:	cd 01       	movw	r24, r26
 5c8:	08 95       	ret

000005ca <_exit>:
 5ca:	f8 94       	cli

000005cc <__stop_program>:
 5cc:	ff cf       	rjmp	.-2      	; 0x5cc <__stop_program>
